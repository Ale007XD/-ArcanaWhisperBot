name: Deploy Telegram Bot to VPS

on:
  push:
    branches:
      - main  # Запускать при push в ветку main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}

      - name: Add SSH host
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Deploy to VPS
        env:
          VPS_USER: ${{ secrets.VPS_USERNAME }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
          PROJECT_PATH: ${{ secrets.PROJECT_PATH }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
            # Переходим в директорию проекта (или создаем, если ее нет)
            mkdir -p ${PROJECT_PATH} && cd ${PROJECT_PATH}

            # Останавливаем и удаляем старый контейнер, если он существует
            if [ \$(docker ps -q -f name=arcane_keeper_bot) ]; then
              echo 'Stopping and removing old container...'
              docker-compose down
            fi

            # Получаем последние изменения из репозитория
            # Проверяем, существует ли .git, если нет - клонируем
            if [ ! -d .git ]; then
              echo 'Cloning repository...'
              git clone https://github.com/${{ github.repository }}.git .
            else
              echo 'Pulling latest changes...'
              git pull origin main
            fi

            # Собираем новый образ и запускаем контейнер в фоновом режиме
            echo 'Building and starting new container...'
            docker-compose up --build -d
            
            # Удаляем "висящие" образы, чтобы не занимать место
            docker image prune -f
            
            echo 'Deployment finished successfully!'
          "
